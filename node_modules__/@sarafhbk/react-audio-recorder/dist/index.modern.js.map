{"version":3,"file":"index.modern.js","sources":["../src/react-audio-recorder/status.ts","../src/react-audio-recorder/useTimer.tsx","../src/react-audio-recorder/useAudioRecorder.tsx","../src/react-audio-recorder/ReactAudioRecorder.tsx"],"sourcesContent":["export enum RECORD_STATUS {\n  IDLE = \"idle\",\n  RECORDING = \"recording\",\n  PAUSED = \"paused\",\n}\n","import { useState, useRef } from \"react\";\n\nconst useTimer = () => {\n  const countRef = useRef<any>(null);\n  const [timer, setTimer] = useState<number>(0);\n\n  const handleStartTimer = () => {\n    countRef.current = setInterval(() => {\n      setTimer((timer) => timer + 1);\n    }, 1000);\n  };\n\n  const handlePauseTimer = () => {\n    clearInterval(countRef.current);\n  };\n\n  const handleResumeTimer = () => {\n    countRef.current = setInterval(() => {\n      setTimer((timer) => timer + 1);\n    }, 1000);\n  };\n\n  const handleResetTimer = () => {\n    clearInterval(countRef.current);\n    setTimer(0);\n  };\n\n  return {\n    timer,\n    handleStartTimer,\n    handlePauseTimer,\n    handleResumeTimer,\n    handleResetTimer,\n  };\n};\n\nexport default useTimer;\n","import { useState, useRef } from 'react'\nimport { RECORD_STATUS } from './status'\nimport useTimer from './useTimer'\n\ntype record_status_type =\n  | RECORD_STATUS.RECORDING\n  | RECORD_STATUS.PAUSED\n  | RECORD_STATUS.IDLE\n\nlet mediaRecorder: MediaRecorder\nlet localStream: MediaStream\n\nexport const useAudioRecorder = () => {\n  const dataArray = useRef<Array<Blob>>([])\n\n  const [status, setStatus] = useState<record_status_type>(RECORD_STATUS.IDLE)\n  const [audioResult, setAudioResult] = useState<string>('')\n  const [errorMessage, setErrorMessage] = useState<string>('')\n\n  const {\n    timer,\n    handleStartTimer,\n    handlePauseTimer,\n    handleResumeTimer,\n    handleResetTimer\n  } = useTimer()\n\n  const startRecording = () => {\n    if (status === RECORD_STATUS.IDLE) {\n      try {\n        setErrorMessage('')\n        navigator.mediaDevices\n          .getUserMedia({ audio: true })\n          .then((mediaStreamObj: MediaStream) => {\n            localStream = mediaStreamObj\n            mediaRecorder = new MediaRecorder(mediaStreamObj)\n            mediaRecorder.start()\n            mediaRecorder.onstart = () => {\n              handleStartTimer()\n              setStatus(RECORD_STATUS.RECORDING)\n            }\n            mediaRecorder.ondataavailable = (event: BlobEvent) => {\n              dataArray.current.push(event.data)\n            }\n          })\n          .catch((error) => {\n            setErrorMessage(error?.message)\n          })\n      } catch (error) {\n        setErrorMessage(error?.message)\n      }\n    } else {\n      return\n    }\n  }\n\n  const resumeRecording = () => {\n    if (status === RECORD_STATUS.PAUSED) {\n      mediaRecorder.resume()\n      mediaRecorder.onresume = () => {\n        handleResumeTimer()\n        setStatus(RECORD_STATUS.RECORDING)\n      }\n    } else {\n      return\n    }\n  }\n\n  const pauseRecording = () => {\n    if (status === RECORD_STATUS.RECORDING) {\n      mediaRecorder.pause()\n      mediaRecorder.onpause = () => {\n        handlePauseTimer()\n        setStatus(RECORD_STATUS.PAUSED)\n      }\n    } else {\n      return\n    }\n  }\n\n  const stopRecording = () => {\n    if (status !== RECORD_STATUS.IDLE) {\n      mediaRecorder.stop()\n      mediaRecorder.onstop = () => {\n        handleResetTimer()\n        let audioData = new Blob(dataArray.current, { type: 'audio/wav;' })\n        dataArray.current = []\n        setAudioResult(window.URL.createObjectURL(audioData))\n        setStatus(RECORD_STATUS.IDLE)\n        localStream.getAudioTracks().forEach((track: MediaStreamTrack) => {\n          track.stop()\n        })\n      }\n    } else {\n      return\n    }\n  }\n\n  return {\n    startRecording,\n    stopRecording,\n    pauseRecording,\n    resumeRecording,\n    status,\n    audioResult,\n    errorMessage,\n    timer\n  }\n}\n","import { ReactElement } from 'react'\nimport { useAudioRecorder } from './useAudioRecorder'\n\nexport const ReactAudioRecorder = ({\n  render\n}: {\n  render: ({\n    startRecording,\n    stopRecording,\n    pauseRecording,\n    resumeRecording,\n    status,\n    audioResult,\n    errorMessage,\n    timer\n  }: {\n    startRecording: () => void\n    stopRecording: () => void\n    pauseRecording: () => void\n    resumeRecording: () => void\n    status: string\n    audioResult: string\n    errorMessage: string\n    timer: number\n  }) => ReactElement\n}) => {\n  const {\n    startRecording,\n    stopRecording,\n    pauseRecording,\n    resumeRecording,\n    status,\n    audioResult,\n    errorMessage,\n    timer\n  } = useAudioRecorder()\n\n  return render({\n    startRecording,\n    stopRecording,\n    pauseRecording,\n    resumeRecording,\n    status,\n    audioResult,\n    errorMessage,\n    timer\n  })\n}\n"],"names":["RECORD_STATUS","useTimer","countRef","useRef","useState","timer","setTimer","handleStartTimer","current","setInterval","handlePauseTimer","clearInterval","handleResumeTimer","handleResetTimer","mediaRecorder","localStream","useAudioRecorder","dataArray","IDLE","status","setStatus","audioResult","setAudioResult","errorMessage","setErrorMessage","startRecording","navigator","mediaDevices","getUserMedia","audio","then","mediaStreamObj","MediaRecorder","start","onstart","RECORDING","ondataavailable","event","push","data","error","message","resumeRecording","PAUSED","resume","onresume","pauseRecording","pause","onpause","stopRecording","stop","onstop","audioData","Blob","type","window","URL","createObjectURL","getAudioTracks","forEach","track","ReactAudioRecorder","render"],"mappings":"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"}